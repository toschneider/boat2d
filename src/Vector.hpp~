/*
 * TVector2<T>.hpp
 *
 *  Created on: Dec 4, 2015
 *      Author: twiemann
 */

#ifndef SRC_VECTOR_HPP_
#define SRC_VECTOR_HPP_

#include <ostream>

namespace jumper
{
/// TODO: Implement Vector<T>2 class and add typedefs !!!

template<class T>
class Vector2
{
    private:
        T m_x;
        T m_y;


    public:
        Vector2(T x, T y){m_x = x; m_y = y;}
        Vector2(){m_x = 0; m_y = 0;}
        Vector2(const Vector2<T>& other){m_x = other.m_x; m_y = other.m_y;}
        Vector2<T> operator =(const Vector2<T>& other)
        {
            if((*this) != other)
            {
                m_x = other.m_x;
                m_y = other.m_y;
            }
            return *this;
        }
        Vector2<T> operator +(const Vector2<T>& other) const
        {
            Vector2<T> p(*this);
            p += other;
            return p;
        }
        void operator +=(const Vector2<T>& other)
        {
            m_x += other.m_x;
            m_y += other.m_y;
        }
        Vector2<T> operator -(const Vector2<T>& other) const
        {
            Vector2<T> p(*this);
            p -= other;
            return p;
        }
        void operator -=(const Vector2<T>& other)
        {
            m_x -= other.m_x;
            m_y -= other.m_y;
        }
        Vector2<T> operator *(const T val) const
        {
            Vector2<T> p(*this);
            p *= val;
            return p;
        }
        void operator *=(const T val)
        {
            m_x *= val;
            m_y *= val;
        }
        T operator *(const Vector2<T>& other) const 
        {
        return ((m_x*other.x())+(m_y*y()));
        }
        bool operator ==(const Vector2<T>& other) const
        {
            float epsilon = 0.00001;
            return (((m_x - other.m_x) < epsilon)&&((m_y - other.m_y) < epsilon));
        }
        
        bool operator !=(const Vector2<T>& other) const
        {
            return !((*this) == other);
        }
        T& operator[](T u)
        {
            if(u != 0)
            {
                return m_y;
            }
            else
            {
                return m_x;
            }
        }
        
        T x() const
        {
            return m_x;
        }
        void setX(T x)
        {
            m_x = x;
        }
        T y() const
        {
            return m_y;
        }
        void setY(T y)
        {
            m_y = y;
        }
        ~Vector2()
        {
        }

        friend std::ostream& operator<<(std::ostream& os, const Vector2<T> v)
        {
            os << "x/y("<< v.x() << " , " << v.y() << ")" << std::endl;
        }
        
       




}; /* namespace jumper */
        template<typename T>
        std::ostream& operator<<(std::ostream& os, const Vector2<T>& v);

typedef Vector2<float> Vector2f;
typedef Vector2<int> Vector2i;


}

#endif /* SRC_VECTOR_HPP_ */
